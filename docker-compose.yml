version: '3.8'

services:
  frontend:
    build:
      context: . 
      dockerfile: ./Dockerfile
    environment:
      - PORT=3000
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=http://backend-web1:3001
    ports:
      - "3000:3000"
    expose:
      - "3000"
    restart: always
    networks:
      - app-network
    depends_on:
      - backend-web1


  backend-web1:
    build: ./backend
    env_file:
      - ./.env.backend
    environment:
      - SERVER_ID=Web-Server-1
      - PORT=3001 
      - NODE_ENV=development 
    expose:
      - "3001"
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules 
    restart: always
    depends_on:
      db:
        condition: service_healthy
    networks:
      - app-network

  db:
    image: postgres:16-alpine
    restart: always
    env_file:
      - ./.env.backend 
    volumes:
      - postgres_data:/var/lib/postgresql/data 
    expose:
      - "5432"
    ports:
      - "5433:5432"
    healthcheck: 
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
